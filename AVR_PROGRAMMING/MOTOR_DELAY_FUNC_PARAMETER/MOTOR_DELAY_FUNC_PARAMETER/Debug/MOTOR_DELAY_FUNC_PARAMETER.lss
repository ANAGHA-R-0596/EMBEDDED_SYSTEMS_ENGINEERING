
MOTOR_DELAY_FUNC_PARAMETER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000849  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ab  00000000  00000000  00000a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000317  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001434  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c7  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001aa  00000000  00000000  0000184f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000019f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <clockwise>:
}

// Rotate Motor in clockwise direction
void clockwise(int delay)
{
	PORTB |= (1 << PORTB5);     // Set PB5 HIGH
  80:	25 b1       	in	r18, 0x05	; 5
  82:	20 62       	ori	r18, 0x20	; 32
  84:	25 b9       	out	0x05, r18	; 5
	PORTB &= ~(1 << PORTB4);    // Set PB4 LOW
  86:	25 b1       	in	r18, 0x05	; 5
  88:	2f 7e       	andi	r18, 0xEF	; 239
  8a:	25 b9       	out	0x05, r18	; 5
	while (delay--)
  8c:	07 c0       	rjmp	.+14     	; 0x9c <clockwise+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	8f e9       	ldi	r24, 0x9F	; 159
  90:	9f e0       	ldi	r25, 0x0F	; 15
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <clockwise+0x12>
  96:	00 c0       	rjmp	.+0      	; 0x98 <clockwise+0x18>
  98:	00 00       	nop
  9a:	c9 01       	movw	r24, r18
  9c:	9c 01       	movw	r18, r24
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	31 09       	sbc	r19, r1
  a2:	89 2b       	or	r24, r25
  a4:	a1 f7       	brne	.-24     	; 0x8e <clockwise+0xe>
	{
		_delay_ms(1);
	}
}
  a6:	08 95       	ret

000000a8 <stop>:

// Stop Motor
void stop(int delay)
{
	PORTB &= ~(1 << PORTB4);    // Clear PB4
  a8:	25 b1       	in	r18, 0x05	; 5
  aa:	2f 7e       	andi	r18, 0xEF	; 239
  ac:	25 b9       	out	0x05, r18	; 5
	PORTB &= ~(1 << PORTB5);    // Clear PB5
  ae:	25 b1       	in	r18, 0x05	; 5
  b0:	2f 7d       	andi	r18, 0xDF	; 223
  b2:	25 b9       	out	0x05, r18	; 5
	while (delay--) 
  b4:	07 c0       	rjmp	.+14     	; 0xc4 <stop+0x1c>
  b6:	8f e9       	ldi	r24, 0x9F	; 159
  b8:	9f e0       	ldi	r25, 0x0F	; 15
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <stop+0x12>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <stop+0x18>
  c0:	00 00       	nop
  c2:	c9 01       	movw	r24, r18
  c4:	9c 01       	movw	r18, r24
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	31 09       	sbc	r19, r1
  ca:	89 2b       	or	r24, r25
  cc:	a1 f7       	brne	.-24     	; 0xb6 <stop+0xe>
	{
		_delay_ms(1);
	}           
}
  ce:	08 95       	ret

000000d0 <counter_clockwise>:


// Rotate Motor in counter clockwise direction
void counter_clockwise(int delay)
{
	PORTB |= (1 << PORTB4);     // Set PB4 HIGH
  d0:	25 b1       	in	r18, 0x05	; 5
  d2:	20 61       	ori	r18, 0x10	; 16
  d4:	25 b9       	out	0x05, r18	; 5
	PORTB &= ~(1 << PORTB5);    // Set PB5 LOW
  d6:	25 b1       	in	r18, 0x05	; 5
  d8:	2f 7d       	andi	r18, 0xDF	; 223
  da:	25 b9       	out	0x05, r18	; 5
	while (delay--)
  dc:	07 c0       	rjmp	.+14     	; 0xec <counter_clockwise+0x1c>
  de:	8f e9       	ldi	r24, 0x9F	; 159
  e0:	9f e0       	ldi	r25, 0x0F	; 15
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <counter_clockwise+0x12>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <counter_clockwise+0x18>
  e8:	00 00       	nop
  ea:	c9 01       	movw	r24, r18
  ec:	9c 01       	movw	r18, r24
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	31 09       	sbc	r19, r1
  f2:	89 2b       	or	r24, r25
  f4:	a1 f7       	brne	.-24     	; 0xde <counter_clockwise+0xe>
	{
		_delay_ms(1);
	}
}
  f6:	08 95       	ret

000000f8 <main>:
void stop(int);
void counter_clockwise(int);

int main(void)
{
	DDRB |= (1 << DDB5);   // Set PB5 as output
  f8:	84 b1       	in	r24, 0x04	; 4
  fa:	80 62       	ori	r24, 0x20	; 32
  fc:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << DDB4);   // Set PB4 as output
  fe:	84 b1       	in	r24, 0x04	; 4
 100:	80 61       	ori	r24, 0x10	; 16
 102:	84 b9       	out	0x04, r24	; 4
	
	while (1)
	{
		clockwise(7000);
 104:	88 e5       	ldi	r24, 0x58	; 88
 106:	9b e1       	ldi	r25, 0x1B	; 27
 108:	0e 94 40 00 	call	0x80	; 0x80 <clockwise>
		stop(2000);
 10c:	80 ed       	ldi	r24, 0xD0	; 208
 10e:	97 e0       	ldi	r25, 0x07	; 7
 110:	0e 94 54 00 	call	0xa8	; 0xa8 <stop>
		counter_clockwise(7000);
 114:	88 e5       	ldi	r24, 0x58	; 88
 116:	9b e1       	ldi	r25, 0x1B	; 27
 118:	0e 94 68 00 	call	0xd0	; 0xd0 <counter_clockwise>
		stop(2000);	
 11c:	80 ed       	ldi	r24, 0xD0	; 208
 11e:	97 e0       	ldi	r25, 0x07	; 7
 120:	0e 94 54 00 	call	0xa8	; 0xa8 <stop>
 124:	ef cf       	rjmp	.-34     	; 0x104 <main+0xc>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
