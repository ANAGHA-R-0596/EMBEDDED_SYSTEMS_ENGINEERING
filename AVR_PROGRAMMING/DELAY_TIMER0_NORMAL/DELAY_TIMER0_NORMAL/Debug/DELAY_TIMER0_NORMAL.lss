
DELAY_TIMER0_NORMAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006bd  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063b  00000000  00000000  00000875  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023d  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000360  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002a  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay_3s>:
#include <avr/io.h>

void delay_3s(void)
{
	unsigned long int i, count = 187500;
	for(i = 0;i<count;i++) //This will run for 62500 for getting 1sec delay
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	50 e0       	ldi	r21, 0x00	; 0
  84:	ba 01       	movw	r22, r20
  86:	0e c0       	rjmp	.+28     	; 0xa4 <delay_3s+0x24>
	{
		TCNT0 = 0;
  88:	16 bc       	out	0x26, r1	; 38
		TCCR0A = 0; // FOR NORMAL CLOCK SOURCE
  8a:	14 bc       	out	0x24, r1	; 36
		TCCR0B |= (1 << CS00); //001 FOR NO PRESCALING,SO SET CS00 TO 1.
  8c:	85 b5       	in	r24, 0x25	; 37
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	85 bd       	out	0x25, r24	; 37
		TIFR0 |= (1 << TOV0);  //SET OVERFLOW FLAG 0.
  92:	85 b3       	in	r24, 0x15	; 21
  94:	81 60       	ori	r24, 0x01	; 1
  96:	85 bb       	out	0x15, r24	; 21
		while (!(TIFR0 & (1 << TOV0))); //WAITING TIMER OVERFLOW FLAG TO SET SO THAT WE GET 16US DELAY.
  98:	a8 9b       	sbis	0x15, 0	; 21
  9a:	fe cf       	rjmp	.-4      	; 0x98 <delay_3s+0x18>
#include <avr/io.h>

void delay_3s(void)
{
	unsigned long int i, count = 187500;
	for(i = 0;i<count;i++) //This will run for 62500 for getting 1sec delay
  9c:	4f 5f       	subi	r20, 0xFF	; 255
  9e:	5f 4f       	sbci	r21, 0xFF	; 255
  a0:	6f 4f       	sbci	r22, 0xFF	; 255
  a2:	7f 4f       	sbci	r23, 0xFF	; 255
  a4:	4c 36       	cpi	r20, 0x6C	; 108
  a6:	8c ed       	ldi	r24, 0xDC	; 220
  a8:	58 07       	cpc	r21, r24
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	68 07       	cpc	r22, r24
  ae:	71 05       	cpc	r23, r1
  b0:	58 f3       	brcs	.-42     	; 0x88 <delay_3s+0x8>
		TCCR0A = 0; // FOR NORMAL CLOCK SOURCE
		TCCR0B |= (1 << CS00); //001 FOR NO PRESCALING,SO SET CS00 TO 1.
		TIFR0 |= (1 << TOV0);  //SET OVERFLOW FLAG 0.
		while (!(TIFR0 & (1 << TOV0))); //WAITING TIMER OVERFLOW FLAG TO SET SO THAT WE GET 16US DELAY.
	}
}
  b2:	08 95       	ret

000000b4 <main>:


int main(void)
{
	
    DDRB |= (1 << DDB5);
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	84 b9       	out	0x04, r24	; 4
	
    while (1) 
    {
		PORTB ^= (1 << PORTB5);  // FOR BLINKING LED.
  ba:	95 b1       	in	r25, 0x05	; 5
  bc:	80 e2       	ldi	r24, 0x20	; 32
  be:	89 27       	eor	r24, r25
  c0:	85 b9       	out	0x05, r24	; 5
		delay_3s();
  c2:	0e 94 40 00 	call	0x80	; 0x80 <delay_3s>
  c6:	f9 cf       	rjmp	.-14     	; 0xba <main+0x6>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
