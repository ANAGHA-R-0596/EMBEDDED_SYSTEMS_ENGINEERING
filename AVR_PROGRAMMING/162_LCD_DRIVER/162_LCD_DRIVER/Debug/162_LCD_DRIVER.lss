
162_LCD_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  0000074a  000007be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000074a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000820  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001092  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000883  00000000  00000000  0000198a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d9  00000000  00000000  0000220d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  000028e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000477  00000000  00000000  00002a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000747  00000000  00000000  00002eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000035fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 89 01 	call	0x312	; 0x312 <main>
  8e:	0c 94 a3 03 	jmp	0x746	; 0x746 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_enable_pulse>:
}

// this function allows us to return the cursor to home
void lcd_home(void)
{
	lcd_cmd(0x02);
  96:	85 b1       	in	r24, 0x05	; 5
  98:	88 60       	ori	r24, 0x08	; 8
  9a:	85 b9       	out	0x05, r24	; 5
  9c:	85 e0       	ldi	r24, 0x05	; 5
  9e:	8a 95       	dec	r24
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_enable_pulse+0x8>
  a2:	00 00       	nop
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	87 7f       	andi	r24, 0xF7	; 247
  a8:	85 b9       	out	0x05, r24	; 5
  aa:	87 ec       	ldi	r24, 0xC7	; 199
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <lcd_enable_pulse+0x18>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <lcd_enable_pulse+0x1e>
  b4:	00 00       	nop
  b6:	08 95       	ret

000000b8 <lcd_send_nibble>:
  b8:	9b b1       	in	r25, 0x0b	; 11
  ba:	93 7c       	andi	r25, 0xC3	; 195
  bc:	9b b9       	out	0x0b, r25	; 11
  be:	83 ff       	sbrs	r24, 3
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <lcd_send_nibble+0x10>
  c2:	9b b1       	in	r25, 0x0b	; 11
  c4:	94 60       	ori	r25, 0x04	; 4
  c6:	9b b9       	out	0x0b, r25	; 11
  c8:	82 ff       	sbrs	r24, 2
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <lcd_send_nibble+0x1a>
  cc:	9b b1       	in	r25, 0x0b	; 11
  ce:	98 60       	ori	r25, 0x08	; 8
  d0:	9b b9       	out	0x0b, r25	; 11
  d2:	81 ff       	sbrs	r24, 1
  d4:	03 c0       	rjmp	.+6      	; 0xdc <lcd_send_nibble+0x24>
  d6:	9b b1       	in	r25, 0x0b	; 11
  d8:	90 61       	ori	r25, 0x10	; 16
  da:	9b b9       	out	0x0b, r25	; 11
  dc:	80 ff       	sbrs	r24, 0
  de:	03 c0       	rjmp	.+6      	; 0xe6 <lcd_send_nibble+0x2e>
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_enable_pulse>
  ea:	08 95       	ret

000000ec <lcd_send_byte>:
  ec:	cf 93       	push	r28
  ee:	c8 2f       	mov	r28, r24
  f0:	61 30       	cpi	r22, 0x01	; 1
  f2:	21 f4       	brne	.+8      	; 0xfc <lcd_send_byte+0x10>
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	80 61       	ori	r24, 0x10	; 16
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	03 c0       	rjmp	.+6      	; 0x102 <lcd_send_byte+0x16>
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	85 b9       	out	0x05, r24	; 5
 102:	8c 2f       	mov	r24, r28
 104:	82 95       	swap	r24
 106:	8f 70       	andi	r24, 0x0F	; 15
 108:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 10c:	8c 2f       	mov	r24, r28
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <lcd_cmd>:
 118:	cf 93       	push	r28
 11a:	c8 2f       	mov	r28, r24
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 76 00 	call	0xec	; 0xec <lcd_send_byte>
 122:	c1 50       	subi	r28, 0x01	; 1
 124:	c2 30       	cpi	r28, 0x02	; 2
 126:	30 f4       	brcc	.+12     	; 0x134 <lcd_cmd+0x1c>
 128:	8f e3       	ldi	r24, 0x3F	; 63
 12a:	9f e1       	ldi	r25, 0x1F	; 31
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_cmd+0x14>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_cmd+0x1a>
 132:	00 00       	nop
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <lcd_data>:
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	0e 94 76 00 	call	0xec	; 0xec <lcd_send_byte>
 13e:	08 95       	ret

00000140 <lcd_set_cursor>:
 140:	88 23       	and	r24, r24
 142:	11 f0       	breq	.+4      	; 0x148 <lcd_set_cursor+0x8>
 144:	90 e4       	ldi	r25, 0x40	; 64
 146:	01 c0       	rjmp	.+2      	; 0x14a <lcd_set_cursor+0xa>
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	86 2f       	mov	r24, r22
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	89 0f       	add	r24, r25
 150:	80 68       	ori	r24, 0x80	; 128
 152:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>
 156:	08 95       	ret

00000158 <lcd_print>:
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	ec 01       	movw	r28, r24
 15e:	03 c0       	rjmp	.+6      	; 0x166 <lcd_print+0xe>
 160:	21 96       	adiw	r28, 0x01	; 1
 162:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>
 166:	88 81       	ld	r24, Y
 168:	81 11       	cpse	r24, r1
 16a:	fa cf       	rjmp	.-12     	; 0x160 <lcd_print+0x8>
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <lcd_clear>:
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>
 178:	08 95       	ret

0000017a <lcd_init>:
// this function initialises the lcd. (initialisation sequence from datasheet)

void lcd_init(void)
{
	// Make control and data pins outputs
	LCD_RS_DDR |= (1<<LCD_RS_PIN);
 17a:	84 b1       	in	r24, 0x04	; 4
 17c:	80 61       	ori	r24, 0x10	; 16
 17e:	84 b9       	out	0x04, r24	; 4
	LCD_EN_DDR |= (1<<LCD_EN_PIN);
 180:	84 b1       	in	r24, 0x04	; 4
 182:	88 60       	ori	r24, 0x08	; 8
 184:	84 b9       	out	0x04, r24	; 4
	LCD_D_DDR  |= (1<<LCD_D7_PIN)|(1<<LCD_D6_PIN)|(1<<LCD_D5_PIN)|(1<<LCD_D4_PIN);
 186:	8a b1       	in	r24, 0x0a	; 10
 188:	8c 63       	ori	r24, 0x3C	; 60
 18a:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	89 ef       	ldi	r24, 0xF9	; 249
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <lcd_init+0x18>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <lcd_init+0x22>
 19c:	00 00       	nop

	_delay_ms(20);               // power-up wait
	LCD_RS_PORT &= ~(1<<LCD_RS_PIN); 				// RS=0
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	8f 7e       	andi	r24, 0xEF	; 239
 1a2:	85 b9       	out	0x05, r24	; 5

	//  8-bit wake-up sequence (sent as high nibbles). why nibbles?
	LCD_EN_PORT &= ~(1 << LCD_EN_PIN);   		 // make EN =0 .
 1a4:	85 b1       	in	r24, 0x05	; 5
 1a6:	87 7f       	andi	r24, 0xF7	; 247
 1a8:	85 b9       	out	0x05, r24	; 5
	lcd_send_nibble(0x03);
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 1b0:	8f e1       	ldi	r24, 0x1F	; 31
 1b2:	9e e4       	ldi	r25, 0x4E	; 78
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <lcd_init+0x3a>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <lcd_init+0x40>
 1ba:	00 00       	nop
	_delay_ms(5);
	lcd_send_nibble(0x03);
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	87 e5       	ldi	r24, 0x57	; 87
 1c4:	92 e0       	ldi	r25, 0x02	; 2
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_init+0x4c>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <lcd_init+0x52>
 1cc:	00 00       	nop
	_delay_us(150);
	lcd_send_nibble(0x03);
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 1d4:	87 e5       	ldi	r24, 0x57	; 87
 1d6:	92 e0       	ldi	r25, 0x02	; 2
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_init+0x5e>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_init+0x64>
 1de:	00 00       	nop
	_delay_us(150);

	//Switch to 4-bit
	lcd_send_nibble(0x02);
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 1e6:	87 e5       	ldi	r24, 0x57	; 87
 1e8:	92 e0       	ldi	r25, 0x02	; 2
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcd_init+0x70>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <lcd_init+0x76>
 1f0:	00 00       	nop
	_delay_us(150);

	// note that from here onwards its cmd !

	//Function set: 4-bit, 2 lines, 5x8 font
	lcd_cmd(0x28);
 1f2:	88 e2       	ldi	r24, 0x28	; 40
 1f4:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>

	//Display off

	lcd_cmd(0x08);
 1f8:	88 e0       	ldi	r24, 0x08	; 8
 1fa:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>
	//Clear
	lcd_cmd(0x01);
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>

	//Entry mode: increment, no shift
	lcd_cmd(0x06);
 204:	86 e0       	ldi	r24, 0x06	; 6
 206:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>


	// Display on, cursor off, blink off
	lcd_cmd(0x0C);
 20a:	8c e0       	ldi	r24, 0x0C	; 12
 20c:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>
 210:	08 95       	ret

00000212 <lcd_print_uint16>:
}

// function to print integers. (we use recursion)
void lcd_print_uint16(uint16_t v)
{
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	ec 01       	movw	r28, r24
	if (v >= 10)
 218:	8a 30       	cpi	r24, 0x0A	; 10
 21a:	91 05       	cpc	r25, r1
 21c:	68 f0       	brcs	.+26     	; 0x238 <lcd_print_uint16+0x26>
	{
		lcd_print_uint16(v / 10);  				 // print higher digits first
 21e:	9c 01       	movw	r18, r24
 220:	ad ec       	ldi	r26, 0xCD	; 205
 222:	bc ec       	ldi	r27, 0xCC	; 204
 224:	0e 94 94 03 	call	0x728	; 0x728 <__umulhisi3>
 228:	96 95       	lsr	r25
 22a:	87 95       	ror	r24
 22c:	96 95       	lsr	r25
 22e:	87 95       	ror	r24
 230:	96 95       	lsr	r25
 232:	87 95       	ror	r24
 234:	0e 94 09 01 	call	0x212	; 0x212 <lcd_print_uint16>
	}
	lcd_data('0' + (v % 10));       				// then print the last digit
 238:	9e 01       	movw	r18, r28
 23a:	ad ec       	ldi	r26, 0xCD	; 205
 23c:	bc ec       	ldi	r27, 0xCC	; 204
 23e:	0e 94 94 03 	call	0x728	; 0x728 <__umulhisi3>
 242:	96 95       	lsr	r25
 244:	87 95       	ror	r24
 246:	96 95       	lsr	r25
 248:	87 95       	ror	r24
 24a:	96 95       	lsr	r25
 24c:	87 95       	ror	r24
 24e:	9c 01       	movw	r18, r24
 250:	22 0f       	add	r18, r18
 252:	33 1f       	adc	r19, r19
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	82 0f       	add	r24, r18
 262:	93 1f       	adc	r25, r19
 264:	9e 01       	movw	r18, r28
 266:	28 1b       	sub	r18, r24
 268:	39 0b       	sbc	r19, r25
 26a:	c9 01       	movw	r24, r18
 26c:	80 5d       	subi	r24, 0xD0	; 208
 26e:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <lcd_print_float>:

//To print float numbers
void lcd_print_float(float num, uint8_t dec_places)
{
 278:	8f 92       	push	r8
 27a:	9f 92       	push	r9
 27c:	af 92       	push	r10
 27e:	bf 92       	push	r11
 280:	cf 92       	push	r12
 282:	df 92       	push	r13
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	4b 01       	movw	r8, r22
 28e:	5c 01       	movw	r10, r24
 290:	d4 2f       	mov	r29, r20
	uint16_t integer_part = (uint16_t) num; // Extract integer part by typecasting it to int
 292:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__fixunssfsi>
 296:	6b 01       	movw	r12, r22
 298:	7c 01       	movw	r14, r24
	lcd_print_uint16(integer_part); // Print integer part
 29a:	cb 01       	movw	r24, r22
 29c:	0e 94 09 01 	call	0x212	; 0x212 <lcd_print_uint16>
	lcd_data('.'); // Print decimal point
 2a0:	8e e2       	ldi	r24, 0x2E	; 46
 2a2:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>

	// Extract and print fractional part
	float dec_part = num - integer_part;
 2a6:	b6 01       	movw	r22, r12
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 99 02 	call	0x532	; 0x532 <__floatunsisf>
 2b0:	9b 01       	movw	r18, r22
 2b2:	ac 01       	movw	r20, r24
 2b4:	c5 01       	movw	r24, r10
 2b6:	b4 01       	movw	r22, r8
 2b8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__subsf3>

	for (uint8_t i = 0; i < dec_places; i++)
 2bc:	c0 e0       	ldi	r28, 0x00	; 0
 2be:	1c c0       	rjmp	.+56     	; 0x2f8 <lcd_print_float+0x80>
	{
		dec_part *= 10;
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	40 e2       	ldi	r20, 0x20	; 32
 2c6:	51 e4       	ldi	r21, 0x41	; 65
 2c8:	0e 94 27 03 	call	0x64e	; 0x64e <__mulsf3>
 2cc:	4b 01       	movw	r8, r22
 2ce:	5c 01       	movw	r10, r24
		uint16_t dec = (uint16_t) dec_part;
 2d0:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__fixunssfsi>
 2d4:	6b 01       	movw	r12, r22
 2d6:	7c 01       	movw	r14, r24
		lcd_data('0' + dec);
 2d8:	80 e3       	ldi	r24, 0x30	; 48
 2da:	8c 0d       	add	r24, r12
 2dc:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>
		dec_part -= dec;
 2e0:	b6 01       	movw	r22, r12
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 99 02 	call	0x532	; 0x532 <__floatunsisf>
 2ea:	9b 01       	movw	r18, r22
 2ec:	ac 01       	movw	r20, r24
 2ee:	c5 01       	movw	r24, r10
 2f0:	b4 01       	movw	r22, r8
 2f2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__subsf3>
	lcd_data('.'); // Print decimal point

	// Extract and print fractional part
	float dec_part = num - integer_part;

	for (uint8_t i = 0; i < dec_places; i++)
 2f6:	cf 5f       	subi	r28, 0xFF	; 255
 2f8:	cd 17       	cp	r28, r29
 2fa:	10 f3       	brcs	.-60     	; 0x2c0 <lcd_print_float+0x48>
		dec_part *= 10;
		uint16_t dec = (uint16_t) dec_part;
		lcd_data('0' + dec);
		dec_part -= dec;
	}
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	ff 90       	pop	r15
 302:	ef 90       	pop	r14
 304:	df 90       	pop	r13
 306:	cf 90       	pop	r12
 308:	bf 90       	pop	r11
 30a:	af 90       	pop	r10
 30c:	9f 90       	pop	r9
 30e:	8f 90       	pop	r8
 310:	08 95       	ret

00000312 <main>:
#include <util/delay.h>
#include "lcd.h"

int main(void)
{
	lcd_init();
 312:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_init>
	lcd_set_cursor(0, 0);
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_set_cursor>
	lcd_print("Hello LCD");
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_print>

	lcd_set_cursor(1, 0);
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_set_cursor>
	lcd_print("It works! ");
 32e:	8a e0       	ldi	r24, 0x0A	; 10
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 336:	2f ef       	ldi	r18, 0xFF	; 255
 338:	83 ed       	ldi	r24, 0xD3	; 211
 33a:	90 e3       	ldi	r25, 0x30	; 48
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <main+0x2a>
 344:	00 c0       	rjmp	.+0      	; 0x346 <main+0x34>
 346:	00 00       	nop
	_delay_ms(1000);
	lcd_clear();
 348:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_clear>
	// small demo: print a number
	lcd_print_uint16(1234);
 34c:	82 ed       	ldi	r24, 0xD2	; 210
 34e:	94 e0       	ldi	r25, 0x04	; 4
 350:	0e 94 09 01 	call	0x212	; 0x212 <lcd_print_uint16>
	//print a float value
	lcd_print_float(15.6234,4);
 354:	44 e0       	ldi	r20, 0x04	; 4
 356:	62 e7       	ldi	r22, 0x72	; 114
 358:	79 ef       	ldi	r23, 0xF9	; 249
 35a:	89 e7       	ldi	r24, 0x79	; 121
 35c:	91 e4       	ldi	r25, 0x41	; 65
 35e:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_print_float>

	while (1)
	{
		lcd_set_cursor(0, 0);
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_set_cursor>
		lcd_print("INTEGER NUMBER");
 36a:	85 e1       	ldi	r24, 0x15	; 21
 36c:	91 e0       	ldi	r25, 0x01	; 1
 36e:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_print>
		lcd_set_cursor(1, 0);
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_set_cursor>
		lcd_print_uint16(1234);
 37a:	82 ed       	ldi	r24, 0xD2	; 210
 37c:	94 e0       	ldi	r25, 0x04	; 4
 37e:	0e 94 09 01 	call	0x212	; 0x212 <lcd_print_uint16>
 382:	2f ef       	ldi	r18, 0xFF	; 255
 384:	83 ed       	ldi	r24, 0xD3	; 211
 386:	90 e3       	ldi	r25, 0x30	; 48
 388:	21 50       	subi	r18, 0x01	; 1
 38a:	80 40       	sbci	r24, 0x00	; 0
 38c:	90 40       	sbci	r25, 0x00	; 0
 38e:	e1 f7       	brne	.-8      	; 0x388 <main+0x76>
 390:	00 c0       	rjmp	.+0      	; 0x392 <main+0x80>
 392:	00 00       	nop
		_delay_ms(1000);
		lcd_clear();
 394:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_clear>
 398:	2f ef       	ldi	r18, 0xFF	; 255
 39a:	83 ed       	ldi	r24, 0xD3	; 211
 39c:	90 e3       	ldi	r25, 0x30	; 48
 39e:	21 50       	subi	r18, 0x01	; 1
 3a0:	80 40       	sbci	r24, 0x00	; 0
 3a2:	90 40       	sbci	r25, 0x00	; 0
 3a4:	e1 f7       	brne	.-8      	; 0x39e <main+0x8c>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <main+0x96>
 3a8:	00 00       	nop
		_delay_ms(1000);
		lcd_set_cursor(0, 0);
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_set_cursor>
		lcd_print("FLOAT NUMBER");
 3b2:	84 e2       	ldi	r24, 0x24	; 36
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_print>
		lcd_set_cursor(1, 0);
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_set_cursor>
		lcd_print_float(15.6234,4);
 3c2:	44 e0       	ldi	r20, 0x04	; 4
 3c4:	62 e7       	ldi	r22, 0x72	; 114
 3c6:	79 ef       	ldi	r23, 0xF9	; 249
 3c8:	89 e7       	ldi	r24, 0x79	; 121
 3ca:	91 e4       	ldi	r25, 0x41	; 65
 3cc:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_print_float>
 3d0:	2f ef       	ldi	r18, 0xFF	; 255
 3d2:	83 ed       	ldi	r24, 0xD3	; 211
 3d4:	90 e3       	ldi	r25, 0x30	; 48
 3d6:	21 50       	subi	r18, 0x01	; 1
 3d8:	80 40       	sbci	r24, 0x00	; 0
 3da:	90 40       	sbci	r25, 0x00	; 0
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <main+0xc4>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <main+0xce>
 3e0:	00 00       	nop
		_delay_ms(1000);
		lcd_clear();
 3e2:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_clear>
 3e6:	2f ef       	ldi	r18, 0xFF	; 255
 3e8:	83 ed       	ldi	r24, 0xD3	; 211
 3ea:	90 e3       	ldi	r25, 0x30	; 48
 3ec:	21 50       	subi	r18, 0x01	; 1
 3ee:	80 40       	sbci	r24, 0x00	; 0
 3f0:	90 40       	sbci	r25, 0x00	; 0
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <main+0xda>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <main+0xe4>
 3f6:	00 00       	nop
 3f8:	b4 cf       	rjmp	.-152    	; 0x362 <main+0x50>

000003fa <__subsf3>:
 3fa:	50 58       	subi	r21, 0x80	; 128

000003fc <__addsf3>:
 3fc:	bb 27       	eor	r27, r27
 3fe:	aa 27       	eor	r26, r26
 400:	0e 94 15 02 	call	0x42a	; 0x42a <__addsf3x>
 404:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__fp_round>
 408:	0e 94 df 02 	call	0x5be	; 0x5be <__fp_pscA>
 40c:	38 f0       	brcs	.+14     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 40e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__fp_pscB>
 412:	20 f0       	brcs	.+8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 414:	39 f4       	brne	.+14     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 416:	9f 3f       	cpi	r25, 0xFF	; 255
 418:	19 f4       	brne	.+6      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41a:	26 f4       	brtc	.+8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 41c:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__fp_nan>
 420:	0e f4       	brtc	.+2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 422:	e0 95       	com	r30
 424:	e7 fb       	bst	r30, 7
 426:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__fp_inf>

0000042a <__addsf3x>:
 42a:	e9 2f       	mov	r30, r25
 42c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__fp_split3>
 430:	58 f3       	brcs	.-42     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 432:	ba 17       	cp	r27, r26
 434:	62 07       	cpc	r22, r18
 436:	73 07       	cpc	r23, r19
 438:	84 07       	cpc	r24, r20
 43a:	95 07       	cpc	r25, r21
 43c:	20 f0       	brcs	.+8      	; 0x446 <__addsf3x+0x1c>
 43e:	79 f4       	brne	.+30     	; 0x45e <__addsf3x+0x34>
 440:	a6 f5       	brtc	.+104    	; 0x4aa <__addsf3x+0x80>
 442:	0c 94 20 03 	jmp	0x640	; 0x640 <__fp_zero>
 446:	0e f4       	brtc	.+2      	; 0x44a <__addsf3x+0x20>
 448:	e0 95       	com	r30
 44a:	0b 2e       	mov	r0, r27
 44c:	ba 2f       	mov	r27, r26
 44e:	a0 2d       	mov	r26, r0
 450:	0b 01       	movw	r0, r22
 452:	b9 01       	movw	r22, r18
 454:	90 01       	movw	r18, r0
 456:	0c 01       	movw	r0, r24
 458:	ca 01       	movw	r24, r20
 45a:	a0 01       	movw	r20, r0
 45c:	11 24       	eor	r1, r1
 45e:	ff 27       	eor	r31, r31
 460:	59 1b       	sub	r21, r25
 462:	99 f0       	breq	.+38     	; 0x48a <__addsf3x+0x60>
 464:	59 3f       	cpi	r21, 0xF9	; 249
 466:	50 f4       	brcc	.+20     	; 0x47c <__addsf3x+0x52>
 468:	50 3e       	cpi	r21, 0xE0	; 224
 46a:	68 f1       	brcs	.+90     	; 0x4c6 <__addsf3x+0x9c>
 46c:	1a 16       	cp	r1, r26
 46e:	f0 40       	sbci	r31, 0x00	; 0
 470:	a2 2f       	mov	r26, r18
 472:	23 2f       	mov	r18, r19
 474:	34 2f       	mov	r19, r20
 476:	44 27       	eor	r20, r20
 478:	58 5f       	subi	r21, 0xF8	; 248
 47a:	f3 cf       	rjmp	.-26     	; 0x462 <__addsf3x+0x38>
 47c:	46 95       	lsr	r20
 47e:	37 95       	ror	r19
 480:	27 95       	ror	r18
 482:	a7 95       	ror	r26
 484:	f0 40       	sbci	r31, 0x00	; 0
 486:	53 95       	inc	r21
 488:	c9 f7       	brne	.-14     	; 0x47c <__addsf3x+0x52>
 48a:	7e f4       	brtc	.+30     	; 0x4aa <__addsf3x+0x80>
 48c:	1f 16       	cp	r1, r31
 48e:	ba 0b       	sbc	r27, r26
 490:	62 0b       	sbc	r22, r18
 492:	73 0b       	sbc	r23, r19
 494:	84 0b       	sbc	r24, r20
 496:	ba f0       	brmi	.+46     	; 0x4c6 <__addsf3x+0x9c>
 498:	91 50       	subi	r25, 0x01	; 1
 49a:	a1 f0       	breq	.+40     	; 0x4c4 <__addsf3x+0x9a>
 49c:	ff 0f       	add	r31, r31
 49e:	bb 1f       	adc	r27, r27
 4a0:	66 1f       	adc	r22, r22
 4a2:	77 1f       	adc	r23, r23
 4a4:	88 1f       	adc	r24, r24
 4a6:	c2 f7       	brpl	.-16     	; 0x498 <__addsf3x+0x6e>
 4a8:	0e c0       	rjmp	.+28     	; 0x4c6 <__addsf3x+0x9c>
 4aa:	ba 0f       	add	r27, r26
 4ac:	62 1f       	adc	r22, r18
 4ae:	73 1f       	adc	r23, r19
 4b0:	84 1f       	adc	r24, r20
 4b2:	48 f4       	brcc	.+18     	; 0x4c6 <__addsf3x+0x9c>
 4b4:	87 95       	ror	r24
 4b6:	77 95       	ror	r23
 4b8:	67 95       	ror	r22
 4ba:	b7 95       	ror	r27
 4bc:	f7 95       	ror	r31
 4be:	9e 3f       	cpi	r25, 0xFE	; 254
 4c0:	08 f0       	brcs	.+2      	; 0x4c4 <__addsf3x+0x9a>
 4c2:	b0 cf       	rjmp	.-160    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 4c4:	93 95       	inc	r25
 4c6:	88 0f       	add	r24, r24
 4c8:	08 f0       	brcs	.+2      	; 0x4cc <__addsf3x+0xa2>
 4ca:	99 27       	eor	r25, r25
 4cc:	ee 0f       	add	r30, r30
 4ce:	97 95       	ror	r25
 4d0:	87 95       	ror	r24
 4d2:	08 95       	ret

000004d4 <__fixunssfsi>:
 4d4:	0e 94 06 03 	call	0x60c	; 0x60c <__fp_splitA>
 4d8:	88 f0       	brcs	.+34     	; 0x4fc <__fixunssfsi+0x28>
 4da:	9f 57       	subi	r25, 0x7F	; 127
 4dc:	98 f0       	brcs	.+38     	; 0x504 <__fixunssfsi+0x30>
 4de:	b9 2f       	mov	r27, r25
 4e0:	99 27       	eor	r25, r25
 4e2:	b7 51       	subi	r27, 0x17	; 23
 4e4:	b0 f0       	brcs	.+44     	; 0x512 <__fixunssfsi+0x3e>
 4e6:	e1 f0       	breq	.+56     	; 0x520 <__fixunssfsi+0x4c>
 4e8:	66 0f       	add	r22, r22
 4ea:	77 1f       	adc	r23, r23
 4ec:	88 1f       	adc	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	1a f0       	brmi	.+6      	; 0x4f8 <__fixunssfsi+0x24>
 4f2:	ba 95       	dec	r27
 4f4:	c9 f7       	brne	.-14     	; 0x4e8 <__fixunssfsi+0x14>
 4f6:	14 c0       	rjmp	.+40     	; 0x520 <__fixunssfsi+0x4c>
 4f8:	b1 30       	cpi	r27, 0x01	; 1
 4fa:	91 f0       	breq	.+36     	; 0x520 <__fixunssfsi+0x4c>
 4fc:	0e 94 20 03 	call	0x640	; 0x640 <__fp_zero>
 500:	b1 e0       	ldi	r27, 0x01	; 1
 502:	08 95       	ret
 504:	0c 94 20 03 	jmp	0x640	; 0x640 <__fp_zero>
 508:	67 2f       	mov	r22, r23
 50a:	78 2f       	mov	r23, r24
 50c:	88 27       	eor	r24, r24
 50e:	b8 5f       	subi	r27, 0xF8	; 248
 510:	39 f0       	breq	.+14     	; 0x520 <__fixunssfsi+0x4c>
 512:	b9 3f       	cpi	r27, 0xF9	; 249
 514:	cc f3       	brlt	.-14     	; 0x508 <__fixunssfsi+0x34>
 516:	86 95       	lsr	r24
 518:	77 95       	ror	r23
 51a:	67 95       	ror	r22
 51c:	b3 95       	inc	r27
 51e:	d9 f7       	brne	.-10     	; 0x516 <__fixunssfsi+0x42>
 520:	3e f4       	brtc	.+14     	; 0x530 <__fixunssfsi+0x5c>
 522:	90 95       	com	r25
 524:	80 95       	com	r24
 526:	70 95       	com	r23
 528:	61 95       	neg	r22
 52a:	7f 4f       	sbci	r23, 0xFF	; 255
 52c:	8f 4f       	sbci	r24, 0xFF	; 255
 52e:	9f 4f       	sbci	r25, 0xFF	; 255
 530:	08 95       	ret

00000532 <__floatunsisf>:
 532:	e8 94       	clt
 534:	09 c0       	rjmp	.+18     	; 0x548 <__floatsisf+0x12>

00000536 <__floatsisf>:
 536:	97 fb       	bst	r25, 7
 538:	3e f4       	brtc	.+14     	; 0x548 <__floatsisf+0x12>
 53a:	90 95       	com	r25
 53c:	80 95       	com	r24
 53e:	70 95       	com	r23
 540:	61 95       	neg	r22
 542:	7f 4f       	sbci	r23, 0xFF	; 255
 544:	8f 4f       	sbci	r24, 0xFF	; 255
 546:	9f 4f       	sbci	r25, 0xFF	; 255
 548:	99 23       	and	r25, r25
 54a:	a9 f0       	breq	.+42     	; 0x576 <__floatsisf+0x40>
 54c:	f9 2f       	mov	r31, r25
 54e:	96 e9       	ldi	r25, 0x96	; 150
 550:	bb 27       	eor	r27, r27
 552:	93 95       	inc	r25
 554:	f6 95       	lsr	r31
 556:	87 95       	ror	r24
 558:	77 95       	ror	r23
 55a:	67 95       	ror	r22
 55c:	b7 95       	ror	r27
 55e:	f1 11       	cpse	r31, r1
 560:	f8 cf       	rjmp	.-16     	; 0x552 <__floatsisf+0x1c>
 562:	fa f4       	brpl	.+62     	; 0x5a2 <__floatsisf+0x6c>
 564:	bb 0f       	add	r27, r27
 566:	11 f4       	brne	.+4      	; 0x56c <__floatsisf+0x36>
 568:	60 ff       	sbrs	r22, 0
 56a:	1b c0       	rjmp	.+54     	; 0x5a2 <__floatsisf+0x6c>
 56c:	6f 5f       	subi	r22, 0xFF	; 255
 56e:	7f 4f       	sbci	r23, 0xFF	; 255
 570:	8f 4f       	sbci	r24, 0xFF	; 255
 572:	9f 4f       	sbci	r25, 0xFF	; 255
 574:	16 c0       	rjmp	.+44     	; 0x5a2 <__floatsisf+0x6c>
 576:	88 23       	and	r24, r24
 578:	11 f0       	breq	.+4      	; 0x57e <__floatsisf+0x48>
 57a:	96 e9       	ldi	r25, 0x96	; 150
 57c:	11 c0       	rjmp	.+34     	; 0x5a0 <__floatsisf+0x6a>
 57e:	77 23       	and	r23, r23
 580:	21 f0       	breq	.+8      	; 0x58a <__floatsisf+0x54>
 582:	9e e8       	ldi	r25, 0x8E	; 142
 584:	87 2f       	mov	r24, r23
 586:	76 2f       	mov	r23, r22
 588:	05 c0       	rjmp	.+10     	; 0x594 <__floatsisf+0x5e>
 58a:	66 23       	and	r22, r22
 58c:	71 f0       	breq	.+28     	; 0x5aa <__floatsisf+0x74>
 58e:	96 e8       	ldi	r25, 0x86	; 134
 590:	86 2f       	mov	r24, r22
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	2a f0       	brmi	.+10     	; 0x5a2 <__floatsisf+0x6c>
 598:	9a 95       	dec	r25
 59a:	66 0f       	add	r22, r22
 59c:	77 1f       	adc	r23, r23
 59e:	88 1f       	adc	r24, r24
 5a0:	da f7       	brpl	.-10     	; 0x598 <__floatsisf+0x62>
 5a2:	88 0f       	add	r24, r24
 5a4:	96 95       	lsr	r25
 5a6:	87 95       	ror	r24
 5a8:	97 f9       	bld	r25, 7
 5aa:	08 95       	ret

000005ac <__fp_inf>:
 5ac:	97 f9       	bld	r25, 7
 5ae:	9f 67       	ori	r25, 0x7F	; 127
 5b0:	80 e8       	ldi	r24, 0x80	; 128
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	60 e0       	ldi	r22, 0x00	; 0
 5b6:	08 95       	ret

000005b8 <__fp_nan>:
 5b8:	9f ef       	ldi	r25, 0xFF	; 255
 5ba:	80 ec       	ldi	r24, 0xC0	; 192
 5bc:	08 95       	ret

000005be <__fp_pscA>:
 5be:	00 24       	eor	r0, r0
 5c0:	0a 94       	dec	r0
 5c2:	16 16       	cp	r1, r22
 5c4:	17 06       	cpc	r1, r23
 5c6:	18 06       	cpc	r1, r24
 5c8:	09 06       	cpc	r0, r25
 5ca:	08 95       	ret

000005cc <__fp_pscB>:
 5cc:	00 24       	eor	r0, r0
 5ce:	0a 94       	dec	r0
 5d0:	12 16       	cp	r1, r18
 5d2:	13 06       	cpc	r1, r19
 5d4:	14 06       	cpc	r1, r20
 5d6:	05 06       	cpc	r0, r21
 5d8:	08 95       	ret

000005da <__fp_round>:
 5da:	09 2e       	mov	r0, r25
 5dc:	03 94       	inc	r0
 5de:	00 0c       	add	r0, r0
 5e0:	11 f4       	brne	.+4      	; 0x5e6 <__fp_round+0xc>
 5e2:	88 23       	and	r24, r24
 5e4:	52 f0       	brmi	.+20     	; 0x5fa <__fp_round+0x20>
 5e6:	bb 0f       	add	r27, r27
 5e8:	40 f4       	brcc	.+16     	; 0x5fa <__fp_round+0x20>
 5ea:	bf 2b       	or	r27, r31
 5ec:	11 f4       	brne	.+4      	; 0x5f2 <__fp_round+0x18>
 5ee:	60 ff       	sbrs	r22, 0
 5f0:	04 c0       	rjmp	.+8      	; 0x5fa <__fp_round+0x20>
 5f2:	6f 5f       	subi	r22, 0xFF	; 255
 5f4:	7f 4f       	sbci	r23, 0xFF	; 255
 5f6:	8f 4f       	sbci	r24, 0xFF	; 255
 5f8:	9f 4f       	sbci	r25, 0xFF	; 255
 5fa:	08 95       	ret

000005fc <__fp_split3>:
 5fc:	57 fd       	sbrc	r21, 7
 5fe:	90 58       	subi	r25, 0x80	; 128
 600:	44 0f       	add	r20, r20
 602:	55 1f       	adc	r21, r21
 604:	59 f0       	breq	.+22     	; 0x61c <__fp_splitA+0x10>
 606:	5f 3f       	cpi	r21, 0xFF	; 255
 608:	71 f0       	breq	.+28     	; 0x626 <__fp_splitA+0x1a>
 60a:	47 95       	ror	r20

0000060c <__fp_splitA>:
 60c:	88 0f       	add	r24, r24
 60e:	97 fb       	bst	r25, 7
 610:	99 1f       	adc	r25, r25
 612:	61 f0       	breq	.+24     	; 0x62c <__fp_splitA+0x20>
 614:	9f 3f       	cpi	r25, 0xFF	; 255
 616:	79 f0       	breq	.+30     	; 0x636 <__fp_splitA+0x2a>
 618:	87 95       	ror	r24
 61a:	08 95       	ret
 61c:	12 16       	cp	r1, r18
 61e:	13 06       	cpc	r1, r19
 620:	14 06       	cpc	r1, r20
 622:	55 1f       	adc	r21, r21
 624:	f2 cf       	rjmp	.-28     	; 0x60a <__fp_split3+0xe>
 626:	46 95       	lsr	r20
 628:	f1 df       	rcall	.-30     	; 0x60c <__fp_splitA>
 62a:	08 c0       	rjmp	.+16     	; 0x63c <__fp_splitA+0x30>
 62c:	16 16       	cp	r1, r22
 62e:	17 06       	cpc	r1, r23
 630:	18 06       	cpc	r1, r24
 632:	99 1f       	adc	r25, r25
 634:	f1 cf       	rjmp	.-30     	; 0x618 <__fp_splitA+0xc>
 636:	86 95       	lsr	r24
 638:	71 05       	cpc	r23, r1
 63a:	61 05       	cpc	r22, r1
 63c:	08 94       	sec
 63e:	08 95       	ret

00000640 <__fp_zero>:
 640:	e8 94       	clt

00000642 <__fp_szero>:
 642:	bb 27       	eor	r27, r27
 644:	66 27       	eor	r22, r22
 646:	77 27       	eor	r23, r23
 648:	cb 01       	movw	r24, r22
 64a:	97 f9       	bld	r25, 7
 64c:	08 95       	ret

0000064e <__mulsf3>:
 64e:	0e 94 3a 03 	call	0x674	; 0x674 <__mulsf3x>
 652:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__fp_round>
 656:	0e 94 df 02 	call	0x5be	; 0x5be <__fp_pscA>
 65a:	38 f0       	brcs	.+14     	; 0x66a <__mulsf3+0x1c>
 65c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__fp_pscB>
 660:	20 f0       	brcs	.+8      	; 0x66a <__mulsf3+0x1c>
 662:	95 23       	and	r25, r21
 664:	11 f0       	breq	.+4      	; 0x66a <__mulsf3+0x1c>
 666:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__fp_inf>
 66a:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__fp_nan>
 66e:	11 24       	eor	r1, r1
 670:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_szero>

00000674 <__mulsf3x>:
 674:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__fp_split3>
 678:	70 f3       	brcs	.-36     	; 0x656 <__mulsf3+0x8>

0000067a <__mulsf3_pse>:
 67a:	95 9f       	mul	r25, r21
 67c:	c1 f3       	breq	.-16     	; 0x66e <__mulsf3+0x20>
 67e:	95 0f       	add	r25, r21
 680:	50 e0       	ldi	r21, 0x00	; 0
 682:	55 1f       	adc	r21, r21
 684:	62 9f       	mul	r22, r18
 686:	f0 01       	movw	r30, r0
 688:	72 9f       	mul	r23, r18
 68a:	bb 27       	eor	r27, r27
 68c:	f0 0d       	add	r31, r0
 68e:	b1 1d       	adc	r27, r1
 690:	63 9f       	mul	r22, r19
 692:	aa 27       	eor	r26, r26
 694:	f0 0d       	add	r31, r0
 696:	b1 1d       	adc	r27, r1
 698:	aa 1f       	adc	r26, r26
 69a:	64 9f       	mul	r22, r20
 69c:	66 27       	eor	r22, r22
 69e:	b0 0d       	add	r27, r0
 6a0:	a1 1d       	adc	r26, r1
 6a2:	66 1f       	adc	r22, r22
 6a4:	82 9f       	mul	r24, r18
 6a6:	22 27       	eor	r18, r18
 6a8:	b0 0d       	add	r27, r0
 6aa:	a1 1d       	adc	r26, r1
 6ac:	62 1f       	adc	r22, r18
 6ae:	73 9f       	mul	r23, r19
 6b0:	b0 0d       	add	r27, r0
 6b2:	a1 1d       	adc	r26, r1
 6b4:	62 1f       	adc	r22, r18
 6b6:	83 9f       	mul	r24, r19
 6b8:	a0 0d       	add	r26, r0
 6ba:	61 1d       	adc	r22, r1
 6bc:	22 1f       	adc	r18, r18
 6be:	74 9f       	mul	r23, r20
 6c0:	33 27       	eor	r19, r19
 6c2:	a0 0d       	add	r26, r0
 6c4:	61 1d       	adc	r22, r1
 6c6:	23 1f       	adc	r18, r19
 6c8:	84 9f       	mul	r24, r20
 6ca:	60 0d       	add	r22, r0
 6cc:	21 1d       	adc	r18, r1
 6ce:	82 2f       	mov	r24, r18
 6d0:	76 2f       	mov	r23, r22
 6d2:	6a 2f       	mov	r22, r26
 6d4:	11 24       	eor	r1, r1
 6d6:	9f 57       	subi	r25, 0x7F	; 127
 6d8:	50 40       	sbci	r21, 0x00	; 0
 6da:	9a f0       	brmi	.+38     	; 0x702 <__mulsf3_pse+0x88>
 6dc:	f1 f0       	breq	.+60     	; 0x71a <__mulsf3_pse+0xa0>
 6de:	88 23       	and	r24, r24
 6e0:	4a f0       	brmi	.+18     	; 0x6f4 <__mulsf3_pse+0x7a>
 6e2:	ee 0f       	add	r30, r30
 6e4:	ff 1f       	adc	r31, r31
 6e6:	bb 1f       	adc	r27, r27
 6e8:	66 1f       	adc	r22, r22
 6ea:	77 1f       	adc	r23, r23
 6ec:	88 1f       	adc	r24, r24
 6ee:	91 50       	subi	r25, 0x01	; 1
 6f0:	50 40       	sbci	r21, 0x00	; 0
 6f2:	a9 f7       	brne	.-22     	; 0x6de <__mulsf3_pse+0x64>
 6f4:	9e 3f       	cpi	r25, 0xFE	; 254
 6f6:	51 05       	cpc	r21, r1
 6f8:	80 f0       	brcs	.+32     	; 0x71a <__mulsf3_pse+0xa0>
 6fa:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__fp_inf>
 6fe:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_szero>
 702:	5f 3f       	cpi	r21, 0xFF	; 255
 704:	e4 f3       	brlt	.-8      	; 0x6fe <__mulsf3_pse+0x84>
 706:	98 3e       	cpi	r25, 0xE8	; 232
 708:	d4 f3       	brlt	.-12     	; 0x6fe <__mulsf3_pse+0x84>
 70a:	86 95       	lsr	r24
 70c:	77 95       	ror	r23
 70e:	67 95       	ror	r22
 710:	b7 95       	ror	r27
 712:	f7 95       	ror	r31
 714:	e7 95       	ror	r30
 716:	9f 5f       	subi	r25, 0xFF	; 255
 718:	c1 f7       	brne	.-16     	; 0x70a <__mulsf3_pse+0x90>
 71a:	fe 2b       	or	r31, r30
 71c:	88 0f       	add	r24, r24
 71e:	91 1d       	adc	r25, r1
 720:	96 95       	lsr	r25
 722:	87 95       	ror	r24
 724:	97 f9       	bld	r25, 7
 726:	08 95       	ret

00000728 <__umulhisi3>:
 728:	a2 9f       	mul	r26, r18
 72a:	b0 01       	movw	r22, r0
 72c:	b3 9f       	mul	r27, r19
 72e:	c0 01       	movw	r24, r0
 730:	a3 9f       	mul	r26, r19
 732:	70 0d       	add	r23, r0
 734:	81 1d       	adc	r24, r1
 736:	11 24       	eor	r1, r1
 738:	91 1d       	adc	r25, r1
 73a:	b2 9f       	mul	r27, r18
 73c:	70 0d       	add	r23, r0
 73e:	81 1d       	adc	r24, r1
 740:	11 24       	eor	r1, r1
 742:	91 1d       	adc	r25, r1
 744:	08 95       	ret

00000746 <_exit>:
 746:	f8 94       	cli

00000748 <__stop_program>:
 748:	ff cf       	rjmp	.-2      	; 0x748 <__stop_program>
