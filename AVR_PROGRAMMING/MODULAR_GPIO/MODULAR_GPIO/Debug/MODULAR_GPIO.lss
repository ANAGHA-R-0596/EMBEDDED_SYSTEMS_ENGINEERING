
MODULAR_GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f9  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000702  00000000  00000000  00000a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000391  00000000  00000000  0000110b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  0000149c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000381  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000087  00000000  00000000  000018a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 65 00 	call	0xca	; 0xca <main>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <timer0_init>:
#include "gpio.h"
#define F_CPU 16000000UL

void timer0_init(void)
{
	TCNT0 = 0;  //MAKE TIMER COUNTER 0
  80:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (1 << WGM01); //CTC MODE
  82:	84 b5       	in	r24, 0x24	; 36
  84:	82 60       	ori	r24, 0x02	; 2
  86:	84 bd       	out	0x24, r24	; 36
	OCR0A = 249;
  88:	89 ef       	ldi	r24, 0xF9	; 249
  8a:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (1 << CS00) | (1 << CS01); //PRESCALE 64
  8c:	85 b5       	in	r24, 0x25	; 37
  8e:	83 60       	ori	r24, 0x03	; 3
  90:	85 bd       	out	0x25, r24	; 37
	TIFR0 |= (1 << OCF0A); //WRITING 1 TO SET THE FLAG
  92:	85 b3       	in	r24, 0x15	; 21
  94:	82 60       	ori	r24, 0x02	; 2
  96:	85 bb       	out	0x15, r24	; 21
  98:	08 95       	ret

0000009a <delay>:
	
}

void delay(uint16_t ms)
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	ec 01       	movw	r28, r24
	timer0_init();
  a0:	0e 94 40 00 	call	0x80	; 0x80 <timer0_init>
	while(ms--)  //Creates delay for "ms" millisecond,here it's 2000ms
  a4:	06 c0       	rjmp	.+12     	; 0xb2 <delay+0x18>
	{
		while (!(TIFR0 & (1 << OCF0A))) //1ms loop
  a6:	a9 9b       	sbis	0x15, 1	; 21
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <delay+0xc>
		{
			
		}
		TIFR0 |= (1 << OCF0A);
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	85 bb       	out	0x15, r24	; 21
}

void delay(uint16_t ms)
{
	timer0_init();
	while(ms--)  //Creates delay for "ms" millisecond,here it's 2000ms
  b0:	e9 01       	movw	r28, r18
  b2:	9e 01       	movw	r18, r28
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	31 09       	sbc	r19, r1
  b8:	cd 2b       	or	r28, r29
  ba:	a9 f7       	brne	.-22     	; 0xa6 <delay+0xc>
			
		}
		TIFR0 |= (1 << OCF0A);
	}
	
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <gpio_init>:
#include <avr/io.h>
#define F_CPU 16000000UL

void gpio_init(void)
{
	DDRB |= (1 << PORTB1) | (1 << PORTB2) | (1 << PORTB3) | (1 << PORTB4) | (1 << PORTB5);
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	8e 63       	ori	r24, 0x3E	; 62
  c6:	84 b9       	out	0x04, r24	; 4
  c8:	08 95       	ret

000000ca <main>:
#include "delay.h"
#define F_CPU 16000000UL  

int main(void)
{
	gpio_init();
  ca:	0e 94 61 00 	call	0xc2	; 0xc2 <gpio_init>

	while (1)
	{
		PORTB ^= (1 << PORTB1) | (1 << PORTB2) | (1 << PORTB3) | (1 << PORTB4) | (1 << PORTB5);
  ce:	95 b1       	in	r25, 0x05	; 5
  d0:	8e e3       	ldi	r24, 0x3E	; 62
  d2:	89 27       	eor	r24, r25
  d4:	85 b9       	out	0x05, r24	; 5
		delay(2000);  // 2 seconds delay
  d6:	80 ed       	ldi	r24, 0xD0	; 208
  d8:	97 e0       	ldi	r25, 0x07	; 7
  da:	0e 94 4d 00 	call	0x9a	; 0x9a <delay>
  de:	f7 cf       	rjmp	.-18     	; 0xce <main+0x4>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
